{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Alert.js","services/persons.js","App.js","index.js"],"names":["Filter","props","className","id","onChange","handleFilterChange","value","placeholder","PersonForm","onSubmit","handleSubmit","htmlFor","handleNameChange","nameValue","handleNumberChange","numberValue","type","Person","name","number","data-id","onClick","handleClick","Persons","persons","personsList","map","person","key","Alert","timeoutFunc","message","alertTypes","error","success","info","Error","removeAlert","useEffect","setTimeout","baseUrl","newPerson","axios","post","then","response","data","get","put","delete","random","uniqueRandom","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","nameFilter","setNameFilter","alerts","setAlerts","personsService","initialPersons","filteredPersons","filter","toLowerCase","includes","handleChange","event","target","resetPersonForm","preventDefault","some","p","find","window","confirm","updatedPerson","returnedPerson","queueAlert","catch","Promise","resolve","attemptPersonUpdate","wasUpdated","console","log","concat","statusCode","status","errorMessage","handleCreateErrors","finally","dataset","Number","isNaN","deleted","err","removePersonWithId","alertProps","a","alertList","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71ca8c6e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = props => {\r\n  return (\r\n    <div className=\"c-filter\">\r\n      <h3 className=\"c-filter__heading\">Search Contacts</h3>\r\n      <div className=\"c-form-row\">\r\n        <input\r\n          id=\"filter\"\r\n          className=\"c-form-row__input\"\r\n          onChange={props.handleFilterChange}\r\n          value={props.value}\r\n          placeholder=\"Enter name...\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = props => {\r\n  return (\r\n    <div>\r\n      <form className=\"c-person-form\" onSubmit={props.handleSubmit}>\r\n        <h3 className=\"c-person-form__heading\">Add a New Contact</h3>\r\n        <div className={\"c-form-row\"}>\r\n          <label htmlFor=\"name\" className=\"c-form-row__label\">\r\n            Name:\r\n          </label>\r\n          <input\r\n            id=\"name\"\r\n            className=\"c-form-row__input\"\r\n            onChange={props.handleNameChange}\r\n            value={props.nameValue}\r\n          />\r\n        </div>\r\n        <div className=\"c-form-row\">\r\n          <label htmlFor=\"number\" className=\"c-form-row__label\">\r\n            Number:\r\n          </label>\r\n          <input\r\n            id=\"number\"\r\n            className=\"c-form-row__input\"\r\n            onChange={props.handleNumberChange}\r\n            value={props.numberValue}\r\n          />\r\n        </div>\r\n        <div className=\"c-person-form__submit\">\r\n          <button className=\"c-btn\" type=\"submit\">\r\n            Add\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Person = props => {\r\n  return (\r\n    <div className=\"c-person\">\r\n      <span className=\"c-person__detail\">\r\n        <span className=\"u-bold\">{props.name}:</span>\r\n      </span>\r\n      <span className=\"c-person__detail\">\r\n        <span className=\"u-italic\">{props.number}, </span>\r\n      </span>\r\n      <div className=\"c-person__delete\">\r\n        <div className=\"c-person__delete-btn\">\r\n          <button\r\n            className=\"c-btn c-btn--danger\"\r\n            data-id={props.id}\r\n            onClick={props.handleClick}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Persons = ({ persons, handleClick }) => {\r\n  const personsList = persons.map(person => {\r\n    return (\r\n      <Person\r\n        key={person.id}\r\n        id={person.id}\r\n        name={person.name}\r\n        number={person.number}\r\n        handleClick={handleClick}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"c-persons\">\r\n      <h3 className=\"c-persons__heading\">Contact List</h3>\r\n      {personsList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React, { useEffect } from \"react\";\r\n\r\n//  run the timeoutFunc after a given period with useEffect hook\r\nconst Alert = ({ timeoutFunc, id, type, message }) => {\r\n  const alertTypes = {\r\n    error: \"c-alert--error\",\r\n    success: \"c-alert--success\",\r\n    info: \"c-alert--info\"\r\n  };\r\n\r\n  if (!alertTypes[type]) throw new Error(\"Invalid Alert Type\");\r\n\r\n  const removeAlert = () => timeoutFunc(id);\r\n\r\n  useEffect(() => {\r\n    setTimeout(removeAlert, 3000);\r\n  });\r\n\r\n  return (\r\n    <div className={`c-alert ${alertTypes[type]}`}>\r\n      <span className=\"c-alert__txt\">{message}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst create = newPerson => {\r\n  const request = axios.post(baseUrl, newPerson);\r\n\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newPerson) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newPerson);\r\n\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n\r\n  return request;\r\n};\r\n\r\nexport default { create, getAll, update, remove };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/Filter\";\r\nimport PersonForm from \"./components/PersonForm\";\r\nimport Persons from \"./components/Persons\";\r\nimport Alert from \"./components/Alert\";\r\nimport personsService from \"./services/persons\";\r\nimport uniqueRandom from \"unique-random\";\r\n\r\nconst random = uniqueRandom(1, 10000);\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [nameFilter, setNameFilter] = useState(\"\");\r\n  const [alerts, setAlerts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    personsService.getAll().then(initialPersons => {\r\n      setPersons(initialPersons);\r\n    });\r\n  }, []);\r\n\r\n  const filteredPersons = persons.filter(person => {\r\n    return person.name.toLowerCase().includes(nameFilter.toLowerCase());\r\n  });\r\n\r\n  const handleChange = (event, type) => {\r\n    switch (type) {\r\n      case \"nameFilter\":\r\n        setNameFilter(event.target.value);\r\n        break;\r\n      case \"name\":\r\n        setNewName(event.target.value);\r\n        break;\r\n      case \"number\":\r\n        setNewNumber(event.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const resetPersonForm = () => {\r\n    setNewName(\"\");\r\n    setNewNumber(\"\");\r\n  };\r\n\r\n  const createNewPerson = () => {\r\n    const person = {\r\n      name: newName,\r\n      number: newNumber\r\n    };\r\n\r\n    return person;\r\n  };\r\n\r\n  // Attempt to create a new person and return true or false depending on user\r\n  const attemptPersonUpdate = () => {\r\n    const person = persons.find(p => p.name === newName);\r\n    const willUpdate = window.confirm(\r\n      `${person.name} is alrady added to the phonebook, ` +\r\n        \"replace the old number with a new one?\"\r\n    );\r\n\r\n    if (willUpdate) {\r\n      const updatedPerson = { ...person, number: newNumber };\r\n      const id = person.id;\r\n      return personsService\r\n        .update(id, updatedPerson)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.map(p => (p.id !== id ? p : returnedPerson)));\r\n          queueAlert(\r\n            `info-up-${random()}`,\r\n            `info`,\r\n            `${returnedPerson.name}'s number updated to ${returnedPerson.number}`\r\n          );\r\n          return true;\r\n        })\r\n        .catch(error => {\r\n          queueAlert(\r\n            `error-up-${random()}`,\r\n            \"error\",\r\n            `Contact \"${person.name}\" has already been removed from server`\r\n          );\r\n          setPersons(persons.filter(p => p.id !== id));\r\n        });\r\n    } else {\r\n      return Promise.resolve(false);\r\n    }\r\n  };\r\n\r\n  // handle errors associated with adding a new person\r\n  const handleCreateErrors = error => {\r\n    const statusCode = error.response.status;\r\n    const errorMessage = error.response.data.message;\r\n\r\n    switch (statusCode) {\r\n      case 400:\r\n        queueAlert(`err-cr-${random()}`, \"error\", errorMessage);\r\n        break;\r\n      case 422:\r\n        queueAlert(`err-cr-${random()}`, \"error\", errorMessage);\r\n        break;\r\n      default:\r\n        throw error;\r\n    }\r\n  };\r\n\r\n  // handle submit events (PersonForm component)\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const nameExists = persons.some(p => p.name === newName);\r\n\r\n    if (nameExists) {\r\n      attemptPersonUpdate().then(wasUpdated => {\r\n        if (wasUpdated) console.log(\"Person Updated Successfully\");\r\n        else if (!wasUpdated) console.log(\"User Opted Not To Update Person\");\r\n        resetPersonForm();\r\n      });\r\n    } else {\r\n      const person = createNewPerson();\r\n      personsService\r\n        .create(person)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson));\r\n          queueAlert(\r\n            `success-add-${random()}`,\r\n            \"success\",\r\n            `Added \"${returnedPerson.name}\"`\r\n          );\r\n        })\r\n        .catch(error => {\r\n          handleCreateErrors(error);\r\n        })\r\n        .finally(() => resetPersonForm());\r\n    }\r\n  };\r\n\r\n  // Attempt to remove a person with specified id, include basic error logging\r\n  const removePersonWithId = id => {\r\n    let deleted = true;\r\n\r\n    personsService\r\n      .remove(id)\r\n      .catch(err => {\r\n        console.log(err);\r\n        deleted = false;\r\n      })\r\n      .finally(() => {\r\n        if (deleted) {\r\n          setPersons(persons.filter(p => p.id !== id));\r\n        }\r\n      });\r\n  };\r\n\r\n  // Handle click events based on component concern type\r\n  const handleClick = (event, type) => {\r\n    switch (type) {\r\n      case \"deletePerson\":\r\n        const id = event.target.dataset.id;\r\n        if (Number.isNaN(id) || !id) break;\r\n        const person = persons.find(p => p.id === id);\r\n        const willDelete = window.confirm(`Delete ${person.name}?`);\r\n        if (willDelete) {\r\n          removePersonWithId(id);\r\n          queueAlert(\r\n            `info-del-${random()}`,\r\n            \"info\",\r\n            `Removed \"${person.name}\" from contact list`\r\n          );\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // queue alert helper, timeoutFunc removes the alert with given id\r\n  const queueAlert = (id, type, message) => {\r\n    const timeoutFunc = id =>\r\n      setAlerts(alerts => alerts.filter(a => a.id !== id));\r\n    const alertProps = {\r\n      timeoutFunc: timeoutFunc,\r\n      id: id,\r\n      type: type,\r\n      message: message\r\n    };\r\n    setAlerts([...alerts, alertProps]);\r\n  };\r\n\r\n  // display all queued alerts\r\n  const alertList = alerts.map(alert => {\r\n    return (\r\n      <Alert\r\n        timeoutFunc={alert.timeoutFunc}\r\n        key={alert.id}\r\n        id={alert.id}\r\n        type={alert.type}\r\n        message={alert.message}\r\n      ></Alert>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"o-wrapper\">\r\n      <h2>Phonebook</h2>\r\n\r\n      {alertList}\r\n\r\n      <PersonForm\r\n        nameValue={newName}\r\n        numberValue={newNumber}\r\n        handleSubmit={event => handleSubmit(event)}\r\n        handleNameChange={event => handleChange(event, \"name\")}\r\n        handleNumberChange={event => handleChange(event, \"number\")}\r\n      />\r\n\r\n      <Filter\r\n        handleFilterChange={event => handleChange(event, \"nameFilter\")}\r\n        value={nameFilter}\r\n      />\r\n\r\n      <Persons\r\n        persons={filteredPersons}\r\n        handleClick={event => handleClick(event, \"deletePerson\")}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}